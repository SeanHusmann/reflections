(1) When would you want to use a remote repository rather than keeping all your work local?

(a) Having a remote repository is a great idea for when you're collaborating with other people
across the globe.

Everyone can access the same most recent version of the project at a central location
and branch from it to work on things like features, bug fixes, improvements to formatting, 
improvements to code efficiency, improvements to comments, improvements to documentation, etc.

(b) It also nicely functions as a backup of our project files. It ensures we always have at
least two storage locations for our files, locally on at least one device and one remote location.
And when collaborating, the number of more or less recent versions of the project increases
linearly with the number of collaborators. This can be seen as an extra safety net. The more
collaborators, the more potential backups we have (assuming people are regular collaborators
and don't immediately delete their project files after a contribution.)

(c) Finally, what should flow into our consideration at least for using GitHub, is the
public nature of it (assuming we don't wish to pay the monthly subscription fee for private
repositories.) Our files would be open for access by the public, so if we have concerns regarding
our intellectual property, we should be aware of that.




(2) Why might you want to always pull changes manually rather than having Git
automatically stay up-to-date with your remote repository?

The only scenario I can think of is when the repository's file-sizes are very large
and there are very frequent updates to the repository, which might slow my own
development process down as I wait for my local copy to update.

Doing it manually gives me more flexibility. I can check the latest state of the project
on GitHub first, before deciding whether to pull recent updates, because I might feel
the updates impact my own work in one way or another.

Otherwise I can't really think of scenarios where keeping up to date with the latest
changes isn't a good idea.




(3) Describe the differences between forks, clones, and branches. When would you use one 
instead of another?

(a) Forks:
    A fork is a clone of a repository on GitHub's servers to your own storage area on
    GitHub's servers. It's basically running "git clone repository-name" on GitHub's
    servers. The term "forking" is only used in the context of GitHub, not Git.
    
    It's convenient because it automatically gives credit to the source-repository this
    way by containing a backlink to the original from the forked/cloned repository's page.
    
    It also allows for keeping track of all the forks made more easily via the
    source-repository page. Both the total number and the forks themselves.

(b) Clones:
    Clones are clones/copies of entire existing repositories. The IDs of commits are
    exactly the same in both repositories. 

    The source of a clone is also called the "remote", as in "remote repository." 
    When we clone a repository via "git clone repository-url", the "remote" variable is
    automatically updated in Git, which we can view via "git remote" and in more detail
    (showing the remote url) via "git remote -v". If we had set up an empty remote 
    repository on GitHub first, we can set the remote repository url via 
    "git remote add remote-name remote-url", where we could name "remote-name" any way
    we like, but "origin" is customary.

    There is no live-connection between a local and a remote repository.
    That means, when changes are made on either repository, they are not automatically
    reflected in the other one. To update either repository, we need to "push/pull"
    changes to the other one via "git push remote-repo-name branch-to-push" and
    "git pull remote-repo-name branch-to-pull". Where "pushing" will *upload* changes and
    "pull" will *download* changes from/to the specified repository and branch.

(c) Branches:
    Branches are simply lines of commit history, or chains of commits, which share a 
    common ancestor commit at some point at the back of their commit chain.
    
    Each repository starts with one branch, customarily called the "master" branch
    and users may branch off of this main branch at any time and as often as they wish
    to test out and commit changes without affecting a stable main-branch, before
    commiting the changes to the main-branch. 

    It is customary to keep the main (master)
    branch as always stable and release-ready, free of bugs and use branches to test
    additions to this branch for stability and functionality before adding them, to
    guarantee a clean master-branch version of the project is available at all times.


(d) Branches VS Clones VS Forks:
    A branch is useful generally for testing and working out changes and additions to the
    projects, also changes of experimental nature, until they are mature and stable enough
    to be ready to be added to the master branch. This always ensures a clean, stable and
    working master branch. I'd use branches for each new major addition to my code I start
    work on.

    A clone is useful in many situations. When we want to continue working on our project
    on another device. When we want to collaborate with others, we'd clone our local
    repository to GitHub. When others want to collaborate with us, they'd clone our
    repository to their devices from GitHub.

    A fork is useful when we have no permission to contribute to a project and want to make
    changes to it, or when we would like to simply develop our own version of it by
    moving it into a completely new direction with our ideas from here on out.
    In that case we could fork it, creating essentially a duplicate of the project on
    GitHub, which we can then clone to our local directoy to work on it and push/pull
    changes to our very own, separate version of the project on GitHub.




(4) What is the benefit of having a copy of the last known state of the remote stored
locally?

The benefit is to always be able to work with the latest version of the project and
to never lag behind too far behind everyone else working on the project.

Changes introduced in the latest state of the project might affect what we are working
on ourselves, so knowing about these changes as soon as possible allows us to adapt to
them earlier on. The more outdated our local version is, the more we run the risk
that an increasingly bigger amount of changes were introduced, which might increasingly
significantly impact our own work we did while offline.

Having the last known state of the remote stored locally as its own branch also allows us
to keep track of how far ahead we are with our local version compared to the online
version (at least its last state known to us).

Another benefit of having a "copy" of the latest "state" of the remote (meaning all its
branches) is extra safety for our own work we do locally. Since our own work locally is 
on our own local branches, when we "pull" the latest state of the project files and both we on our local version and the remote added commits to the same branch, the new commits
both sides made aren't simply added in chronological order to the same branch,
overwriting each other silently. 
No, the commits of the remote are added to the "remotename/branchname" branch on our local 
machine and a *merge* between our latest commit on this "branchname" branch (our own branch) and the latest commit of remote on that same branch (the latest commit on the 
remotename/branchname branch on our local machine) is initiated, so that:

(a) No commit is overwriting the other (which would be the same as ignoring its 
existence and any changes it introduced.) Remember: commits contain the *state* of the 
files. With "git diff" we merely view the *difference between states of files* at different 
times.
(b) If both modified the same lines differently, a conflict is caused and we are able to 
design a version of the file satisfying both commits.